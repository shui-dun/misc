" 设置前缀键（leader键）为空格
let mapleader="\<Space>"
" 显示行号
set number
" L和H用来快速水平移动
nnoremap L 80l
vnoremap L 80l
nnoremap H 80h
vnoremap H 80h 
" J和K映射到ctrl+b和ctrl+f
nnoremap J <C-f>
vnoremap J <C-f>
nnoremap K <C-b>
vnoremap K <C-b>

" 显示命令
set showcmd
" 设置保存的历史命令数目
set history=1000
" 输入命令时按下tab键自动补全
set wildmenu
set wildmode=longest:full,full
set wildoptions=pum
" 搜索时忽略大小写
set ignorecase
" 如果搜索中有一个或以上的大写字母，则不忽略大小写
set smartcase
" 搜索时高亮显示匹配的文本
set hlsearch
" 按F12切换粘贴模式，避免粘贴时自动缩进，以及tab被转化为空格
set pastetoggle=<F12>
" 每行的缩进值和上一行相等
set autoindent
" tab显示出来是多少个空格的长度
set tabstop=4
" 按tab时缩进的长度
set shiftwidth=4
" 按退格键的时候退回缩进的长度
set softtabstop=4
" 缩进用空格来表示
set expandtab
function! DetectIndent()
    " 只检测文件的前N行来提高效率，避免在大文件中造成延迟
    let l:maxLines = min([line('$'), 100])

    for i in range(1, l:maxLines)
        let l:line = getline(i)
        " 检测tab风格的缩进
        if l:line =~ '^\t'
            set tabstop=4
            set shiftwidth=4
            set softtabstop=4
            set noexpandtab
            return
        " 检测2个空格风格的缩进
        elseif l:line =~ '^  \S'
            set tabstop=2
            set shiftwidth=2
            set softtabstop=2
            set expandtab
            return
        endif
    endfor
endfunction
autocmd BufRead,BufNewFile * call DetectIndent()
" 可视化 tab
set list
set listchars=tab:>-
" 设置补全(ctrl+p)时应该查找哪些类型的候选项，以及如何排序
set cpt=.,k,w,b
" vim的自带目录工具netrw默认使用树视图
let g:netrw_liststyle=3
" 隐藏netrw的帮助信息
let g:netrw_banner=0
" 设置netrw的浏览方式为水平分割
let g:netrw_browse_split=2
" 设置netrw的分割窗口的宽度（例如通过:Vexplore打开）
let g:netrw_winsize=50
" 为vim逆天的删除命令"_d和"_x提供快捷键，分别设置为大写D和大写X
nnoremap D "_d
nnoremap X "_x
" 在可视模式下同样为"_d和"_x提供快捷键
vnoremap D "_d
vnoremap X "_x
" 让剪切板寄存器 "+ 与 "* 和匿名寄存器 "" 保持同步
set clipboard=unnamed,unnamedplus
" 比较当前编辑但没保存的文件和磁盘上的文件
function! s:DiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()
" 搜索时默认开启very magic模式（类似于perl的正则表达式）
nnoremap / /\v
" leader+r替换，默认开启very magic模式
nnoremap <leader>r :%s/\v//gc<left><left><left><left>
" 可视化模式下ctrl+c复制（为了兼容外部翻译软件）
vnoremap <C-c> "+y
" 统计字数（包含中文字符和英文单词）
function! WordCnt() range
    let save = @z
    silent exec 'normal! gv"zy'
    let text = @z
    let @z = save
    silent exec 'normal! gv'

    " 统计中文字符数目
    let cc = 0
    for char in split(text, '\zs')
        if char2nr(char) >= 0x2000
            let cc += 1
        endif
    endfor

    " 移除选中文本中的中文字符（但这一步太耗时了）
    " let engText = substitute(text, '[\u4e00-\u9fff]', '', 'g')
    " 统计单词数目（按照空格和各种标点符号以及换行符分割）
    let wordCount = len(split(text, '[[:blank:][:punct:][:cntrl:]]\+'))
    echo "Count of Chinese characters is:" cc
    echo "Count of words is:" wordCount
endfunc
command! -range WordCnt <line1>,<line2>call WordCnt()

" 插件管理
call plug#begin()
" copilot补全
Plug 'github/copilot.vim'
" 常见语言的词典
Plug 'skywind3000/vim-dict'
" 模糊查找
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
" vim初始页
Plug 'mhinz/vim-startify'
" 快速跳转
Plug 'easymotion/vim-easymotion'
" 注释
Plug 'preservim/nerdcommenter'
call plug#end()

" copilot配置
" 补全所有文件类型
let g:copilot_filetypes = {
\ '*': v:true,
\ }

" fzf.vim配置
" leader+h打开命令历史记录（:History:）
nnoremap <leader>h :History:<CR>
" leader+f打开最近文件（:History）
nnoremap <leader>f :History<CR>
" 默认在new window中打开文件
let g:fzf_action = { 'enter': 'vsplit' }

" easymotion配置
" 禁用所有默认的快捷键
let g:EasyMotion_do_mapping = 0
" 智能大小写
let g:EasyMotion_smartcase = 1
" 设置根据字符搜索的快捷键为s
map s <Plug>(easymotion-s)
" 设置行跳转的快捷键
map <leader>l <Plug>(easymotion-bd-jk)

" nerdcommenter配置
" 禁用默认的快捷键
let g:NERDCreateDefaultMappings = 0
" 设置添加注释的快捷键
nnoremap <leader>c <Plug>NERDCommenterComment
vnoremap <leader>c <Plug>NERDCommenterComment
" 设置取消注释的快捷键
nnoremap <leader>u <Plug>NERDCommenterUncomment
vnoremap <leader>u <Plug>NERDCommenterUncomment
" 注释之后加一个空格
let g:NERDSpaceDelims = 1

" windows下gvim的配置
" " 设置gui下的字体
" " 这个字体需要去https://github.com/crvdgc/Consolas-with-Yahei安装
" set guifont=Consolas-with-Yahei:h14
" " 修复不能退格的bug
" set backspace=indent,eol,start
" " 暗色主题
" colorscheme desert
" " 删除菜单栏
" set guioptions-=m
" " 删除工具栏
" set guioptions-=T
" " 删除右侧滚动条
" set guioptions-=r
" " 删除左侧滚动条
" set guioptions-=L
" " 删除底部滚动条
" set guioptions-=b
" " 启动时最大化
" au GUIEnter * simalt ~x
" " 禁止光标闪烁
" set guicursor+=a:blinkon0
" " 禁止fzf的预览（避免中文导致windows下的fzf.vim渲染错误）
" let g:fzf_preview_window='right:0'
