" 设置前缀键（leader键）为空格
let mapleader="\<Space>"
" 显示行号
set number
" L和H用来快速水平移动
nnoremap L 80l
vnoremap L 80l
nnoremap H 80h
vnoremap H 80h 
" J和K映射到ctrl+b和ctrl+f
nnoremap J <C-f>
vnoremap J <C-f>
nnoremap K <C-b>
vnoremap K <C-b>

" 显示命令
set showcmd
" 设置保存的历史命令数目
set history=1000
" 输入命令时按下tab键自动补全
set wildmenu
set wildmode=longest:full,full
set wildoptions=pum
" 搜索时忽略大小写
set ignorecase
" 如果搜索中有一个或以上的大写字母，则不忽略大小写
set smartcase
" 搜索时高亮显示匹配的文本
set hlsearch
" 可视模式下搜索，自动搜索选中的文本
vnoremap / y/\V<C-R>"<CR>
vnoremap <silent> * :<C-u>call VisualSelection('f')<CR>/<C-R>=@/<CR><CR>
" 按F12切换粘贴模式，避免粘贴时自动缩进，以及tab被转化为空格
set pastetoggle=<F12>
" 每行的缩进值和上一行相等
set autoindent
" tab显示出来是多少个空格的长度
set tabstop=4
" 按tab时缩进的长度
set shiftwidth=4
" 按退格键的时候退回缩进的长度
set softtabstop=4
" 缩进用空格来表示
set expandtab
function! DetectIndent()
    " 只检测文件的前N行来提高效率，避免在大文件中造成延迟
    let l:maxLines = min([line('$'), 100])

    for i in range(1, l:maxLines)
        let l:line = getline(i)
        " 检测tab风格的缩进
        if l:line =~ '^\t'
            set tabstop=4
            set shiftwidth=4
            set softtabstop=4
            set noexpandtab
            return
        " 检测2个空格风格的缩进
        elseif l:line =~ '^  \S'
            set tabstop=2
            set shiftwidth=2
            set softtabstop=2
            set expandtab
            return
        endif
    endfor
endfunction
autocmd BufRead,BufNewFile * call DetectIndent()
" 可视化 tab
set list
set listchars=tab:>-
" 设置补全(ctrl+p)时应该查找哪些类型的候选项，以及如何排序
set cpt=.,k,w,b
" vim的自带目录工具netrw默认使用树视图
let g:netrw_liststyle=3
" 隐藏netrw的帮助信息
let g:netrw_banner=0
" 设置netrw的浏览方式为水平分割
let g:netrw_browse_split=2
" 设置netrw的分割窗口的宽度
let g:netrw_winsize=50
" 打开netrw快捷键
nnoremap <leader>e :Vexplore<CR>
" 普通模式下的x和X是删除而不是剪切
nnoremap x "_x
nnoremap X "_X
" 为d和x提供删除版本的快捷键
nnoremap D "_d
vnoremap D "_d
vnoremap X "_x
" 让剪切板寄存器 "+ 与 "* 和匿名寄存器 "" 保持同步
set clipboard=unnamed,unnamedplus
" 比较当前编辑但没保存的文件和磁盘上的文件
function! s:DiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()
" 搜索时默认不使用正则表达式
nnoremap / /\V
" leader+r替换，默认不使用正则表达式
nnoremap <leader>r :%s/\V//gc<left><left><left><left>
" 统计字数（包含中文字符和英文单词）
function! WordCnt() range
    let save = @z
    silent exec 'normal! gv"zy'
    let text = @z
    let @z = save
    silent exec 'normal! gv'

    " 统计中文字符数目
    let cc = 0
    for char in split(text, '\zs')
        if char2nr(char) >= 0x2000
            let cc += 1
        endif
    endfor

    " 移除选中文本中的中文字符（但这一步太耗时了）
    " let engText = substitute(text, '[\u4e00-\u9fff]', '', 'g')
    " 统计单词数目（按照空格和各种标点符号以及换行符分割）
    let wordCount = len(split(text, '[[:blank:][:punct:][:cntrl:]]\+'))
    echo "Count of Chinese characters is:" cc
    echo "Count of words is:" wordCount
endfunc
command! -range WordCnt <line1>,<line2>call WordCnt()
" 细粒度的undo
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ( (<c-g>u
inoremap [ [<c-g>u
inoremap = =<c-g>u
inoremap <space> <space><c-g>u
inoremap <CR> <CR><c-g>u
inoremap ， ，<c-g>u
inoremap 。 。<c-g>u

" 插件管理
call plug#begin()
" copilot补全
Plug 'github/copilot.vim'
" 常见语言的词典
Plug 'skywind3000/vim-dict'
" 模糊查找
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
" vim初始页
Plug 'mhinz/vim-startify'
" 快速跳转
Plug 'easymotion/vim-easymotion'
" 注释
Plug 'preservim/nerdcommenter'
" 查看文件tag
Plug 'preservim/tagbar'
" 代码补全
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

" copilot配置
" 补全所有文件类型
let g:copilot_filetypes = {
\ '*': v:true,
\ }

" fzf.vim配置
" leader+h打开命令历史记录（:History:）
nnoremap <leader>h :History:<CR>
" leader+f打开最近文件（:History）
nnoremap <leader>f :History<CR>
" leader+t打开当前文件的标签（:BTags）
nnoremap <leader>t :BTags<CR>

" easymotion配置
" 禁用所有默认的快捷键
let g:EasyMotion_do_mapping = 0
" 智能大小写
let g:EasyMotion_smartcase = 1
" 设置根据字符搜索的快捷键为s
map s <Plug>(easymotion-s)
" 设置行跳转的快捷键
map <leader>l <Plug>(easymotion-bd-jk)

" nerdcommenter配置
" 禁用默认的快捷键
let g:NERDCreateDefaultMappings = 0
" 检查所有选定的行是否已被注释（只要有一行没有被注释，就添加注释而非删除注释）
let g:NERDToggleCheckAllLines = 1
" 设置toggle注释的快捷键
nnoremap <leader>c V<Plug>NERDCommenterToggle
vnoremap <leader>c V<Plug>NERDCommenterToggle
" 注释之后加一个空格
let g:NERDSpaceDelims = 1
" python自动会多加一个空格
au FileType python let g:NERDSpaceDelims = 0
" 设置注释的对齐方式是左对齐
let g:NERDDefaultAlign = 'left'

" tagbar配置
nnoremap <leader>b :TagbarToggle<CR>

" coc.nvim配置
set nobackup
set nowritebackup
set updatetime=300
set signcolumn=no
" 使用回车补全，使用ctrl+n/p选择
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                             \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" navigate diagnostics
nmap <silent> g[ <Plug>(coc-diagnostic-prev)
nmap <silent> g] <Plug>(coc-diagnostic-next)
" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" show documentation in preview window
nnoremap <silent> <leader>od :call ShowDocumentation()<CR>
function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  endif
endfunction
" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')
" Symbol renaming
nmap <leader>or <Plug>(coc-rename)
" Formatting selected code
xmap <leader>of  <Plug>(coc-format-selected)
" Applying code actions to the selected code block
nmap <leader>oa  <Plug>(coc-codeaction-cursor)

" windows下gvim的配置
" " 设置gui下的字体
" " 这个字体需要去https://github.com/crvdgc/Consolas-with-Yahei安装
" set guifont=Consolas-with-Yahei:h13
" " 修复不能退格的bug
" set backspace=indent,eol,start
" " 暗色主题
" colorscheme desert
" " 删除菜单栏
" set guioptions-=m
" " 删除工具栏
" set guioptions-=T
" " 添加右侧垂直滚动条
" set guioptions+=r
" " 删除左侧水平滚动条
" set guioptions-=L
" " 删除底部状态栏
" set guioptions-=b
" " 启动时最大化
" au GUIEnter * simalt ~x
" " 禁止光标闪烁
" set guicursor+=a:blinkon0
" " 禁止fzf的预览（避免中文导致windows下的fzf.vim渲染错误）
" let g:fzf_preview_window='right:0'
" " ctrl+c复制
" vnoremap <C-c> "+y
" " ctrl+v粘贴
" nnoremap <C-v> "+p
" vnoremap <C-v> "+p
" inoremap <C-v> <C-r><C-o>+
" " ctrl+x剪切
" vnoremap <C-x> "+d
" " ctrl+z撤销
" nnoremap <C-z> u
" inoremap <C-z> <C-o>u
" vnoremap <C-z> <Esc>u
" " ctrl+r重做
" inoremap <C-r> <C-o><C-r>
" vnoremap <C-r> <Esc><C-r>
" " ctrl+a全选
" nnoremap <C-a> ggVG
" inoremap <C-a> <Esc>ggVG
" vnoremap <C-a> <Esc>ggVG
" " ctrl+s保存
" nnoremap <C-s> :w<CR>
" inoremap <C-s> <Esc>:w<CR>a
" vnoremap <C-s> <Esc>:w<CR>
" " shift+home到行首
" nnoremap <S-Home> v^
" inoremap <S-Home> <Esc>v^
" vnoremap <S-Home> ^
" " shift+end到行尾
" nnoremap <S-End> v$
" inoremap <S-End> <Esc><Right>v$
" vnoremap <S-End> $
" " shift+pageup向上翻页
" nnoremap <S-PageUp> v10k
" inoremap <S-PageUp> <Esc>v10k
" vnoremap <S-PageUp> 10k
" " shift+pagedown向下翻页
" nnoremap <S-PageDown> v10j
" inoremap <S-PageDown> <Esc><Right>v10j
" vnoremap <S-PageDown> 10j
" " shift+up向上移动
" nnoremap <S-Up> vk
" inoremap <S-Up> <Esc>vk
" vnoremap <S-Up> k
" " shift+down向下移动
" nnoremap <S-Down> vj
" inoremap <S-Down> <Esc><Right>vj
" vnoremap <S-Down> j
" " shift+left向左移动
" nnoremap <S-Left> vh
" inoremap <S-Left> <Esc>vh
" vnoremap <S-Left> h
" " shift+right向右移动
" nnoremap <S-Right> vl
" inoremap <S-Right> <Esc><Right>vl
" vnoremap <S-Right> l
" " 退格键删除
" nnoremap <BS> "_X
" vnoremap <BS> "_x
" " 删除键删除而非剪切
" nnoremap <Del> "_x
" vnoremap <Del> "_x
" " 使用ctrl+/toggle注释
" nnoremap <C-/> V<Plug>NERDCommenterToggle
" inoremap <C-/> <Esc>V<Plug>NERDCommenterToggle
" vnoremap <C-/> V<Plug>NERDCommenterToggle
" " 可视模式下tab和shift+tab缩进和反缩进
" vnoremap <Tab> >gv
" vnoremap <S-Tab> <gv
" " 打开explorer.exe快捷键
" nnoremap <leader>E :!explorer %:h<CR>
