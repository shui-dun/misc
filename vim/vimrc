" 一行太长时能显示多少就显示多少
set display+=lastline
" 显示ruler
set ruler
set rulerformat=%30(%{&fileformat}\|%{\"\".(\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\"+\":\"\").\"\"}\ %l,%c%V\ %LL%)
" 显示行号
set number
" 允许在不保存当前文件时切换到另一个缓冲区
set hidden
" 设置检测文件编码的顺序
" 我发现对于大文件，vim解码utf-8和gb2312等编码极其慢，比解码latin这种单字符编码慢很多，但没办法
set fileencodings=utf-8,gb2312,gbk
" indent折叠（使用语法折叠可能会影响性能，并且需要针对各种语言手动开启）
set foldmethod=indent
" 默认内容都是展开的
set foldlevelstart=99
" markdown语法折叠
let g:markdown_folding = 1
" L和H用来快速水平移动
function! OLMapping()
    if &wrap
        return "gj"
    else
        return "zL"
    endif
endfunction
nnoremap <expr> L OLMapping()
vnoremap <expr> L OLMapping()
function! OHMapping()
    if &wrap
        return "gk"
    else
        return "zH"
    endif
endfunction
nnoremap <expr> H OHMapping()
vnoremap <expr> H OHMapping()
" J和K快速垂直移动
nnoremap <expr> J (winheight(0) - 1) . 'gjzb'
vnoremap <expr> J (winheight(0) - 1) . 'gjzb'
nnoremap <expr> K (winheight(0) - 1) . 'gkzt'
vnoremap <expr> K (winheight(0) - 1) . 'gkzt'
" 显示命令
set showcmd
" 设置保存的历史命令数目
set history=1000
" 输入命令时按下tab键自动补全
set wildmenu
set wildmode=longest:full,full
" 搜索时忽略大小写
set ignorecase
" 如果搜索中有一个或以上的大写字母，则不忽略大小写
set smartcase
" 搜索时高亮显示匹配的文本
set hlsearch
" 可视模式下搜索，自动搜索选中的文本
vnoremap / y/\V<C-R>"<CR>
vnoremap <silent> * :<C-u>call VisualSelection('f')<CR>/<C-R>=@/<CR><CR>
" 将?映射到使用列表展示全部搜索结果
function! SearchAndListResults()
    " 首先，获取之前正在搜索的单词，也就是@/的值
    let search_word = @/
    " silent表示不显示'press enter to continue'这种命令输出
    " vimgrep表示使用列表展示搜索结果
    " copen表示打开搜索结果列表（为什么vim不能自动弹出列表呢？很不人性化）
    let cmd = "silent vimgrep /" . search_word . "/ % | copen"
    execute cmd
endfunction
nnoremap ? :call SearchAndListResults()<CR>
" 按F12切换粘贴模式，避免粘贴时自动缩进，以及tab被转化为空格
set pastetoggle=<F12>
" 每行的缩进值和上一行相等
set autoindent
" tab显示出来是多少个空格的长度
set tabstop=4
" 按tab时缩进的长度
set shiftwidth=4
" 按退格键的时候退回缩进的长度
set softtabstop=4
" 缩进用空格来表示
set expandtab
function! DetectIndent()
    " 只检测文件的前N行来提高效率，避免在大文件中造成延迟
    let l:maxLines = min([line('$'), 100])

    for i in range(1, l:maxLines)
        let l:line = getline(i)
        " 检测tab风格的缩进
        if l:line =~ '^\t'
            set tabstop=4
            set shiftwidth=4
            set softtabstop=4
            set noexpandtab
            return
        " 检测2个空格风格的缩进
        elseif l:line =~ '^  \S'
            set tabstop=2
            set shiftwidth=2
            set softtabstop=2
            set expandtab
            return
        endif
    endfor
endfunction
" 只针对小文件进行缩进检测
autocmd BufReadPost * if getfsize(bufname('%')) < 32*1024*1024 | call DetectIndent() | endif
" 可视化tab等特殊字符
set list
set listchars=tab:>-,trail:.
" 设置补全(ctrl+p)时应该查找哪些类型的候选项，以及如何排序
set cpt=.,k,w,b
" vim的自带目录工具netrw默认使用树视图
let g:netrw_liststyle=3
" 隐藏netrw的帮助信息
let g:netrw_banner=0
" 设置netrw用前一个窗口打开文件
let g:netrw_browse_split=4
" 设置netrw的分割窗口的宽度
let g:netrw_winsize=50
" 在垂直分割的窗口打开
let g:netrw_preview = 1
" 打开netrw快捷键
com! Oexplore Vexplore
" 普通模式下的x和X是删除而不是剪切
nnoremap x "_x
nnoremap X "_X
" 为d和x提供删除版本的快捷键
nnoremap D "_d
vnoremap D "_d
vnoremap X "_x
" 让剪切板寄存器 "+ 与 "* 和匿名寄存器 "" 保持同步
set clipboard=unnamed,unnamedplus
" 比较当前编辑但没保存的文件和磁盘上的文件
function! s:ODiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! ODiffWithSaved call s:ODiffWithSaved()
" 搜索时默认不使用正则表达式
nnoremap / /\V
" 替换，默认不使用正则表达式
nnoremap <C-h> :.,$s/\V//gc<left><left><left><left>
vnoremap <C-h> :s/\V//gc<left><left><left><left>
" 细粒度的undo
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ( (<c-g>u
inoremap [ [<c-g>u
inoremap = =<c-g>u
inoremap <space> <space><c-g>u
" 回车应用补全
inoremap <silent><expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>\<C-g>u"
inoremap ， ，<c-g>u
inoremap 。 。<c-g>u
" 修复不能退格的bug
set backspace=indent,eol,start
" 增强diff
set diffopt+=algorithm:histogram,indent-heuristic
" >和<自动恢复可视化区域
vnoremap < <gv
vnoremap > >gv
" 对大文件的设置
autocmd BufReadPre * if getfsize(bufname('%')) > 32*1024*1024
    \ | syntax off
    \ | setlocal nofoldenable
    \ | setlocal nowrap
    \ | setlocal eventignore+=FileType
    \ | setlocal bufhidden=unload
    \ | endif

" 块编辑，由于ctrl+v和粘贴冲突，换个快捷键
nnoremap <C-q> <C-v>

" 插件管理
call plug#begin()
" 常见语言的词典
Plug 'skywind3000/vim-dict'
" vim初始页
Plug 'mhinz/vim-startify'
" 快速跳转
Plug 'easymotion/vim-easymotion'
" 代码注释
Plug 'tpope/vim-commentary'
call plug#end()

" startify配置
let g:startify_custom_header = [
    \'    █   █  ▀  █▀▄▀█     .-. ________  ',
    \'     █ █   █▀ █ ▀ █     |=|/_____/  \ ',
    \'     ▀▄▀  ▄█▄ █   █     |_|_[X]_|_""_|',
    \]
" 列表顺序
let g:startify_lists = [
    \ { 'type': 'files',     'header': ['   MRU']            },
    \ { 'type': 'sessions',  'header': ['   Sessions']       },
    \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
    \ { 'type': 'commands',  'header': ['   Commands']       },
    \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
    \ ]

" easymotion配置
" 禁用所有默认的快捷键
let g:EasyMotion_do_mapping = 0
" 智能大小写
let g:EasyMotion_smartcase = 1
" 设置根据字符搜索的快捷键为s
map s <Plug>(easymotion-s)
" 设置根据字符行内搜索的快捷键为f
map f <Plug>(easymotion-sl)
" 设置行跳转的快捷键
map t <Plug>(easymotion-bd-jk)

" 注释配置
com! -range OComment <line1>,<line2>Commentary