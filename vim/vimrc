" 显示行号
set number
" W用来快速水平移动
nnoremap W 15w
" B用来快速水平移动
nnoremap B 15b
" 显示命令
set showcmd
" 设置保存的历史命令数目
set history=200
" 输入命令时按下tab键自动补全
set wildmenu
set wildmode=longest:full,full
set wildoptions=pum
" 搜索时忽略大小写
set ignorecase
" 如果搜索中有一个或以上的大写字母，则不忽略大小写
set smartcase
" 搜索时高亮显示匹配的文本
set hlsearch
" 按F12切换粘贴模式
set pastetoggle=<F12>
" 每行的缩进值和上一行相等
set autoindent
" tab显示出来是多少个空格的长度
set tabstop=4
" 缩进用空格来表示
set expandtab
" 按tab时缩进的长度
set shiftwidth=4
" 按照文件中其他地方的缩进空格个数来确定一个tab是多少个空格
set smarttab
" 按退格键的时候退回缩进的长度
set softtabstop=4
" 在行首输入tab自动转换为4个空格，否则直接输出一个tab
" 其实我发现使用这个配置后，expandtab等配置就不需要了
function! SmartTab()
    let line = getline('.')
    if line =~ '^[ \t]*$'
        return "\<Space>\<Space>\<Space>\<Space>"
    else
        return "\<C-v>\<Tab>"
    endif
endfunction
inoremap <expr> <Tab> SmartTab()
" 可视化 tab
set list
set listchars=tab:>-
" 设置补全(ctrl+p)时应该查找哪些类型的候选项，以及如何排序
set cpt=.,k,w,b
" vim的自带目录工具netrw默认使用树视图
let g:netrw_liststyle=3
" 隐藏netrw的帮助信息
let g:netrw_banner=0
" 设置netrw的浏览方式为水平分割
let g:netrw_browse_split=2
" 设置netrw的分割窗口的宽度（例如通过:Vexplore打开）
let g:netrw_winsize=50
" 为vim逆天的删除命令"_d和"_x提供快捷键，分别设置为大写D和大写X
nnoremap D "_d
nnoremap X "_x
" 在可视模式下同样为"_d和"_x提供快捷键
vnoremap D "_d
vnoremap X "_x
" 让剪切板寄存器 "+ 与 "* 和匿名寄存器 "" 保持同步
set clipboard=unnamed,unnamedplus
" 比较当前编辑但没保存的文件和磁盘上的文件
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()
" 搜索时默认开启very magic模式（类似于perl的正则表达式）
nnoremap / /\v
" 替换时默认开启very magic模式
cnoremap s/ s/\v
" 可视化模式下ctrl+c复制（为了兼容外部翻译软件）
vnoremap <C-c> "+y
" 统计字数（包含中文字符和英文单词）
function! WordCnt() range
    let save = @z
    silent exec 'normal! gv"zy'
    let text = @z
    let @z = save
    silent exec 'normal! gv'

    " 统计中文字符数目
    let cc = 0
    for char in split(text, '\zs')
        if char2nr(char) >= 0x2000
            let cc += 1
        endif
    endfor

    " 移除选中文本中的中文字符（这一步太耗时了）
    " let engText = substitute(text, '[\u4e00-\u9fff]', '', 'g')
    " 统计单词数目（按照空格和各种标点符号以及换行符分割）
    let wordCount = len(split(text, '[[:blank:][:punct:][:cntrl:]]\+'))
    echo "Count of Chinese characters is:" cc
    echo "Count of words is:" wordCount
endfunc
command! -range WordCnt <line1>,<line2>call WordCnt()

" 插件管理
call plug#begin()
" copilot补全
Plug 'github/copilot.vim'
" 常见语言的词典
Plug 'skywind3000/vim-dict'
" 模糊查找
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
" vim初始页
Plug 'mhinz/vim-startify'
call plug#end()

" copilot配置
" 补全所有文件类型
let g:copilot_filetypes = {
\ '*': v:true,
\ }

" fzf.vim配置
" ctrl+h打开命令历史记录（:History:）
nnoremap <silent> <C-h> :History:<CR>
" 默认在new window中打开文件
let g:fzf_action = { 'enter': 'vsplit' }

" windows下gvim的配置
" " 设置gui下的字体
" " 这个字体需要去https://github.com/crvdgc/Consolas-with-Yahei安装
" set guifont=Consolas-with-Yahei:h14
" " 修复不能退格的bug
" set backspace=indent,eol,start
" " 暗色主题
" colorscheme desert
" " 删除菜单栏
" set guioptions-=m
" " 删除工具栏
" set guioptions-=T
" " 删除右侧滚动条
" set guioptions-=r
" " 删除左侧滚动条
" set guioptions-=L
" " 删除底部滚动条
" set guioptions-=b
" " 启动时最大化
" au GUIEnter * simalt ~x
" " 禁止光标闪烁
" set guicursor+=a:blinkon0
" " 禁止fzf的预览（避免中文导致windows下的fzf.vim渲染错误）
" let g:fzf_preview_window='right:0'
